{
  "componentDescription": "Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.\nUse this component if you want to display an extra label.",
  "propDescriptions": {
    "checked": {
      "description": "If <code>true</code>, the component appears selected.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "classes": {
      "description": "Override or extend the styles applied to the component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "componentsProps": {
      "description": "The props used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "control": {
      "description": "A control element. For instance, it can be a <code>Radio</code>, a <code>Switch</code> or a <code>Checkbox</code>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disabled": {
      "description": "If <code>true</code>, the control is disabled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disableTypography": {
      "description": "If <code>true</code>, the label is rendered as it is passed without an additional typography node.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "inputRef": {
      "description": "Pass a ref to the <code>input</code> element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "label": {
      "description": "A text or an element to be used in an enclosing label element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "labelPlacement": {
      "description": "The position of the label.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onChange": {
      "description": "Callback fired when the state is changed.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "event": "The event source of the callback. You can pull out the new checked state by accessing <code>event.target.checked</code> (boolean)."
      }
    },
    "required": {
      "description": "If <code>true</code>, the label will indicate that the <code>input</code> is required.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slotProps": {
      "description": "The props used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "value": {
      "description": "The value of the component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "labelPlacementStart": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>labelPlacement=\"start\"</code>"
    },
    "labelPlacementTop": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>labelPlacement=\"top\"</code>"
    },
    "labelPlacementBottom": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>labelPlacement=\"bottom\"</code>"
    },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "label": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the label&#39;s Typography component"
    },
    "error": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>error={true}</code>"
    },
    "required": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>required={true}</code>"
    },
    "asterisk": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the asterisk element"
    }
  }
}
