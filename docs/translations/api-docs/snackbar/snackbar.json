{
  "componentDescription": "",
  "propDescriptions": {
    "action": {
      "description": "The action to display. It renders after the message, at the end of the snackbar.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "anchorOrigin": {
      "description": "The anchor of the <code>Snackbar</code>. On smaller screens, the component grows to occupy all the available width, the horizontal alignment is ignored.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "autoHideDuration": {
      "description": "The number of milliseconds to wait before automatically calling the <code>onClose</code> function. <code>onClose</code> should then set the state of the <code>open</code> prop to hide the Snackbar. This behavior is disabled by default with the <code>null</code> value.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "children": {
      "description": "Replace the <code>SnackbarContent</code> component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "classes": {
      "description": "Override or extend the styles applied to the component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "ClickAwayListenerProps": {
      "description": "Props applied to the <code>ClickAwayListener</code> element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "ContentProps": {
      "description": "Props applied to the <a href=\"/material-ui/api/snackbar-content/\"><code>SnackbarContent</code></a> element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disableWindowBlurListener": {
      "description": "If <code>true</code>, the <code>autoHideDuration</code> timer will expire even if the window is not focused.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "key": {
      "description": "When displaying multiple consecutive Snackbars from a parent rendering a single &lt;Snackbar/&gt;, add the key prop to ensure independent treatment of each message. e.g. &lt;Snackbar key={message} /&gt;, otherwise, the message may update-in-place and features such as autoHideDuration may be canceled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "message": {
      "description": "The message to display.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onClose": {
      "description": "Callback fired when the component requests to be closed. Typically <code>onClose</code> is used to set state in the parent component, which is used to control the <code>Snackbar</code> <code>open</code> prop. The <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>, for example ignoring <code>clickaway</code>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "event": "The event source of the callback.",
        "reason": "Can be: <code>&quot;timeout&quot;</code> (<code>autoHideDuration</code> expired), <code>&quot;clickaway&quot;</code>, or <code>&quot;escapeKeyDown&quot;</code>."
      }
    },
    "open": {
      "description": "If <code>true</code>, the component is shown.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "resumeHideDuration": {
      "description": "The number of milliseconds to wait before dismissing after user interaction. If <code>autoHideDuration</code> prop isn&#39;t specified, it does nothing. If <code>autoHideDuration</code> prop is specified but <code>resumeHideDuration</code> isn&#39;t, we default to <code>autoHideDuration / 2</code> ms.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "TransitionComponent": {
      "description": "The component used for the transition. <a href=\"/material-ui/transitions/#transitioncomponent-prop\">Follow this guide</a> to learn more about the requirements for this component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "transitionDuration": {
      "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "TransitionProps": {
      "description": "Props applied to the transition element. By default, the element is based on this <a href=\"http://reactcommunity.org/react-transition-group/transition/\"><code>Transition</code></a> component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "anchorOriginTopCenter": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>anchorOrigin={{ 'top', 'center' }}</code>"
    },
    "anchorOriginBottomCenter": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'center' }}</code>"
    },
    "anchorOriginTopRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>anchorOrigin={{ 'top', 'right' }}</code>"
    },
    "anchorOriginBottomRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'right' }}</code>"
    },
    "anchorOriginTopLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>anchorOrigin={{ 'top', 'left' }}</code>"
    },
    "anchorOriginBottomLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>anchorOrigin={{ 'bottom', 'left' }}</code>"
    }
  }
}
