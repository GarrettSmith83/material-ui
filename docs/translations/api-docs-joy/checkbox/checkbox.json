{
  "componentDescription": "",
  "propDescriptions": {
    "checked": {
      "description": "If <code>true</code>, the component is checked.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "checkedIcon": {
      "description": "The icon to display when the component is checked.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "className": {
      "description": "Class name applied to the root element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "defaultChecked": {
      "description": "The default checked state. Use when the component is not controlled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disableIcon": {
      "description": "If <code>true</code>, the checked icon is removed and the selected variant is applied on the <code>action</code> element instead.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "indeterminate": {
      "description": "If <code>true</code>, the component appears indeterminate. This does not set the native input element to indeterminate due to inconsistent behavior across browsers. However, we set a <code>data-indeterminate</code> attribute on the <code>input</code>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "indeterminateIcon": {
      "description": "The icon to display when the component is indeterminate.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "label": {
      "description": "The label element next to the checkbox.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "name": {
      "description": "The <code>name</code> attribute of the input.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onChange": {
      "description": "Callback fired when the state is changed.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "event": "The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (string). You can pull out the new checked state by accessing <code>event.target.checked</code> (boolean)."
      }
    },
    "overlay": {
      "description": "If <code>true</code>, the root element&#39;s position is set to initial which allows the action area to fill the nearest positioned parent. This prop is useful for composing Checkbox with ListItem component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "readOnly": {
      "description": "If <code>true</code>, the component is read only.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "required": {
      "description": "If <code>true</code>, the <code>input</code> element is required.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "size": {
      "description": "The size of the component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slotProps": {
      "description": "The props used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slots": {
      "description": "The components used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "uncheckedIcon": {
      "description": "The icon when <code>checked</code> is false.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "value": {
      "description": "The value of the component. The DOM API casts this to a string. The browser uses &quot;on&quot; as the default value.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "variant": {
      "description": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Class name applied to the root element." },
    "checkbox": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the checkbox element"
    },
    "action": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the action element"
    },
    "input": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the input element"
    },
    "label": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the label element"
    },
    "checked": {
      "description": "State class applied to {{nodeName}}.",
      "nodeName": "the input component's `checked` class"
    },
    "disabled": {
      "description": "State class applied to {{nodeName}}.",
      "nodeName": "the input component's disabled class"
    },
    "focusVisible": {
      "description": "Class name applied to the root element if the switch has visible focus"
    },
    "indeterminate": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>indeterminate={true}</code>"
    },
    "colorPrimary": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorDanger": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"danger\"</code>"
    },
    "colorInfo": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"info\"</code>"
    },
    "colorNeutral": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"neutral\"</code>"
    },
    "colorSuccess": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"success\"</code>"
    },
    "colorWarning": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"warning\"</code>"
    },
    "colorContext": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "sizeSm": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"sm\"</code>"
    },
    "sizeMd": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"md\"</code>"
    },
    "sizeLg": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"lg\"</code>"
    },
    "variantOutlined": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"outlined\"</code>"
    },
    "variantSoft": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"soft\"</code>"
    },
    "variantSolid": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"solid\"</code>"
    }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "checkbox": "The component that renders the checkbox.",
    "action": "The component that renders the action.",
    "input": "The component that renders the input.",
    "label": "The component that renders the label."
  }
}
