{
  "componentDescription": "",
  "propDescriptions": {
    "children": {
      "description": "The content of the component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "orientation": {
      "description": "The component orientation.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "size": {
      "description": "The size of the component (affect other nested list* components).",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slotProps": {
      "description": "The props used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slots": {
      "description": "The components used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "variant": {
      "description": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "wrap": {
      "description": "Only for horizontal list. If <code>true</code>, the list sets the flex-wrap to &quot;wrap&quot; and adjust margin to have gap-like behavior (will move to <code>gap</code> in the future).",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Classname applied to the root element." },
    "nesting": {
      "description": "Classname applied to the root element if wrapped with nested context."
    },
    "scoped": { "description": "Classname applied to the root element if `scoped` is true." },
    "sizeSm": { "description": "Classname applied to the root element if `size=\"sm\"`." },
    "sizeMd": { "description": "Classname applied to the root element if `size=\"md\"`." },
    "sizeLg": { "description": "Classname applied to the root element if `size=\"lg\"`." },
    "colorPrimary": {
      "description": "Classname applied to the root element if `color=\"primary\"`."
    },
    "colorNeutral": {
      "description": "Classname applied to the root element if `color=\"neutral\"`."
    },
    "colorDanger": {
      "description": "Classname applied to the root element if `color=\"danger\"`."
    },
    "colorInfo": { "description": "Classname applied to the root element if `color=\"info\"`." },
    "colorSuccess": {
      "description": "Classname applied to the root element if `color=\"success\"`."
    },
    "colorWarning": {
      "description": "Classname applied to the root element if `color=\"warning\"`."
    },
    "colorContext": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "variantPlain": {
      "description": "Classname applied to the root element if `variant=\"plain\"`."
    },
    "variantOutlined": {
      "description": "Classname applied to the root element if `variant=\"outlined\"`."
    },
    "variantSoft": {
      "description": "Classname applied to the root element if `variant=\"soft\"`."
    },
    "variantSolid": {
      "description": "Classname applied to the root element if `variant=\"solid\"`."
    },
    "horizontal": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>orientation=\"horizontal\"</code>"
    },
    "vertical": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>orientation=\"vertical\"</code>"
    }
  },
  "slotDescriptions": { "root": "The component that renders the root." }
}
