{
  "componentDescription": "",
  "propDescriptions": {
    "aria-describedby": {
      "description": "Identifies the element (or elements) that describes the object.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "aria-label": {
      "description": "Defines a string value that labels the current element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "aria-labelledby": {
      "description": "Identifies the element (or elements) that labels the current element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "autoFocus": {
      "description": "If <code>true</code>, the <code>input</code> element is focused during the first mount.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "clearIcon": {
      "description": "The icon to display in place of the default clear icon.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "clearText": {
      "description": "Override the default text for the <em>clear</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "closeText": {
      "description": "Override the default text for the <em>close popup</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "defaultValue": {
      "description": "The default value. Use when the component is not controlled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disableClearable": {
      "description": "If <code>true</code>, the input can&#39;t be cleared.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "endDecorator": {
      "description": "Trailing adornment for this input.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "error": {
      "description": "If <code>true</code>, the <code>input</code> will indicate an error. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "filterOptions": {
      "description": "A function that determines the filtered options to be rendered on search.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "options": "The options to render.",
        "state": "The state of the component."
      }
    },
    "forcePopupIcon": {
      "description": "Force the visibility display of the popup icon.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "freeSolo": {
      "description": "If <code>true</code>, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "getLimitTagsText": {
      "description": "The label to display when the tags are truncated (<code>limitTags</code>).",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": { "more": "The number of truncated tags." }
    },
    "getOptionDisabled": {
      "description": "Used to determine the disabled state for a given option.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": { "option": "The option to test." }
    },
    "getOptionLabel": {
      "description": "Used to determine the string value for a given option. It&#39;s used to fill the input (and the list box options if <code>renderOption</code> is not provided).<br>If used in free solo mode, it must accept both the type of the options and a string.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "groupBy": {
      "description": "If provided, the options will be grouped under the returned string. The groupBy value is also used as the text for group headings when <code>renderGroup</code> is not provided.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": { "options": "The options to group." }
    },
    "id": {
      "description": "This prop is used to help implement the accessibility logic. If you don&#39;t provide an id it will fall back to a randomly generated one.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "inputValue": {
      "description": "The input value.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "isOptionEqualToValue": {
      "description": "Used to determine if the option represents the given value. Uses strict equality by default. ⚠️ Both arguments need to be handled, an option can only match with one value.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": { "option": "The option to test.", "value": "The value to test against." }
    },
    "limitTags": {
      "description": "The maximum number of tags that will be visible when not focused. Set <code>-1</code> to disable the limit.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "loading": {
      "description": "If <code>true</code>, the component is in a loading state. This shows the <code>loadingText</code> in place of suggestions (only if there are no suggestions to show, e.g. <code>options</code> are empty).",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "loadingText": {
      "description": "Text to display when in a loading state.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "multiple": {
      "description": "If <code>true</code>, <code>value</code> must be an array and the menu will support multiple selections.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "name": {
      "description": "Name attribute of the <code>input</code> element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "noOptionsText": {
      "description": "Text to display when there are no options.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onChange": {
      "description": "Callback fired when the value changes.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "event": "The event source of the callback.",
        "value": "The new value of the component.",
        "reason": "One of &quot;createOption&quot;, &quot;selectOption&quot;, &quot;removeOption&quot;, &quot;blur&quot; or &quot;clear&quot;."
      }
    },
    "onClose": {
      "description": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "event": "The event source of the callback.",
        "reason": "Can be: <code>&quot;toggleInput&quot;</code>, <code>&quot;escape&quot;</code>, <code>&quot;selectOption&quot;</code>, <code>&quot;removeOption&quot;</code>, <code>&quot;blur&quot;</code>."
      }
    },
    "onHighlightChange": {
      "description": "Callback fired when the highlight option changes.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "event": "The event source of the callback.",
        "option": "The highlighted option.",
        "reason": "Can be: <code>&quot;keyboard&quot;</code>, <code>&quot;auto&quot;</code>, <code>&quot;mouse&quot;</code>, <code>&quot;touch&quot;</code>."
      }
    },
    "onInputChange": {
      "description": "Callback fired when the input value changes.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "event": "The event source of the callback.",
        "value": "The new value of the text input.",
        "reason": "Can be: <code>&quot;input&quot;</code> (user input), <code>&quot;reset&quot;</code> (programmatic change), <code>&quot;clear&quot;</code>."
      }
    },
    "onOpen": {
      "description": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": { "event": "The event source of the callback." }
    },
    "open": {
      "description": "If <code>true</code>, the component is shown.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "openText": {
      "description": "Override the default text for the <em>open popup</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "options": {
      "description": "Array of options.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "placeholder": {
      "description": "The input placeholder",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "popupIcon": {
      "description": "The icon to display in place of the default popup icon.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "readOnly": {
      "description": "If <code>true</code>, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "renderGroup": {
      "description": "Render the group.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": { "params": "The group to render." }
    },
    "renderOption": {
      "description": "Render the option, use <code>getOptionLabel</code> by default.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "props": "The props to apply on the li element.",
        "option": "The option to render.",
        "state": "The state of the component."
      }
    },
    "renderTags": {
      "description": "Render the selected value.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "value": "The <code>value</code> provided to the component.",
        "getTagProps": "A tag props getter.",
        "ownerState": "The state of the Autocomplete component."
      }
    },
    "required": {
      "description": "If <code>true</code>, the <code>input</code> element is required. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "size": {
      "description": "The size of the component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slotProps": {
      "description": "The props used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slots": {
      "description": "The components used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "startDecorator": {
      "description": "Leading adornment for this input.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "type": {
      "description": "Type of the <code>input</code> element. It should be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types\">a valid HTML5 input type</a>.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "value": {
      "description": "The value of the autocomplete.<br>The value must have reference equality with the option in order to be selected. You can customize the equality behavior with the <code>isOptionEqualToValue</code> prop.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "variant": {
      "description": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Class name applied to the root element." },
    "wrapper": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the wrapper element"
    },
    "input": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the input element"
    },
    "startDecorator": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the startDecorator element"
    },
    "endDecorator": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the endDecorator element"
    },
    "formControl": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the component is a descendant of <code>FormControl</code>"
    },
    "focused": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the component is focused"
    },
    "disabled": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "error": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>error={true}</code>"
    },
    "multiple": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the wrapper element",
      "conditions": "<code>multiple={true}</code>"
    },
    "limitTag": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the limitTag element"
    },
    "hasPopupIcon": { "description": "Class name applied when the popup icon is rendered." },
    "hasClearIcon": { "description": "Class name applied when the clear icon is rendered." },
    "clearIndicator": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the clear indicator"
    },
    "popupIndicator": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the popup indicator"
    },
    "popupIndicatorOpen": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the popup indicator",
      "conditions": "the popup is open"
    },
    "listbox": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the listbox component"
    },
    "option": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the option component"
    },
    "loading": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the loading wrapper"
    },
    "noOptions": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the no option wrapper"
    },
    "colorPrimary": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorNeutral": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"neutral\"</code>"
    },
    "colorDanger": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"danger\"</code>"
    },
    "colorInfo": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"info\"</code>"
    },
    "colorSuccess": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"success\"</code>"
    },
    "colorWarning": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"warning\"</code>"
    },
    "colorContext": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "sizeSm": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"sm\"</code>"
    },
    "sizeMd": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"md\"</code>"
    },
    "sizeLg": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"lg\"</code>"
    },
    "variantPlain": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"plain\"</code>"
    },
    "variantOutlined": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"outlined\"</code>"
    },
    "variantSoft": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"soft\"</code>"
    },
    "variantSolid": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>variant=\"solid\"</code>"
    }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "wrapper": "The component that renders the wrapper.",
    "input": "The component that renders the input.",
    "startDecorator": "The component that renders the start decorator.",
    "endDecorator": "The component that renders the end decorator.",
    "clearIndicator": "The component that renders the clear indicator.",
    "popupIndicator": "The component that renders the popup indicator.",
    "listbox": "The component that renders the listbox.",
    "option": "The component that renders the option.",
    "loading": "The component that renders the loading.",
    "noOptions": "The component that renders the no-options.",
    "limitTag": "The component that renders the limit tag."
  }
}
