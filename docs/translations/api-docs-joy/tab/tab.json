{
  "componentDescription": "",
  "propDescriptions": {
    "action": {
      "description": "A ref for imperative actions. It currently only supports <code>focusVisible()</code> action.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onChange": {
      "description": "Callback invoked when new value is being set.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "orientation": {
      "description": "The content direction flow.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slotProps": {
      "description": "The props used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slots": {
      "description": "The components used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "value": {
      "description": "You can provide your own value. Otherwise, it falls back to the child position index.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "variant": {
      "description": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Classname applied to the root element." },
    "disabled": {
      "description": "Classname applied to the root element if <code>disabled={true}</code>."
    },
    "focusVisible": {
      "description": "Classname applied to the root element when its focus is visible."
    },
    "selected": { "description": "Classname applied to the root element when it is selected." },
    "horizontal": {
      "description": "Classname applied to the root element if <code>orientation=&quot;horizontal&quot;</code>."
    },
    "vertical": {
      "description": "Classname applied to the root element if <code>orientation=&quot;vertical&quot;</code>."
    },
    "colorPrimary": {
      "description": "Classname applied to the root element if <code>color=&quot;primary&quot;</code>."
    },
    "colorNeutral": {
      "description": "Classname applied to the root element if <code>color=&quot;neutral&quot;</code>."
    },
    "colorDanger": {
      "description": "Classname applied to the root element if <code>color=&quot;danger&quot;</code>."
    },
    "colorInfo": {
      "description": "Classname applied to the root element if <code>color=&quot;info&quot;</code>."
    },
    "colorSuccess": {
      "description": "Classname applied to the root element if <code>color=&quot;success&quot;</code>."
    },
    "colorWarning": {
      "description": "Classname applied to the root element if <code>color=&quot;warning&quot;</code>."
    },
    "colorContext": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "variantPlain": {
      "description": "Classname applied to the root element if <code>variant=&quot;plain&quot;</code>."
    },
    "variantOutlined": {
      "description": "Classname applied to the root element if <code>variant=&quot;outlined&quot;</code>."
    },
    "variantSoft": {
      "description": "Classname applied to the root element if <code>variant=&quot;soft&quot;</code>."
    },
    "variantSolid": {
      "description": "Classname applied to the root element if <code>variant=&quot;solid&quot;</code>."
    }
  },
  "slotDescriptions": { "root": "The component that renders the root." }
}
