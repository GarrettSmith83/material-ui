{
  "componentDescription": "",
  "propDescriptions": {
    "action": {
      "description": "A ref for imperative actions. It currently only supports <code>focusVisible()</code> action.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "autoFocus": {
      "description": "If <code>true</code>, the select element is focused during the first mount",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "color": {
      "description": "The color of the component. It supports those theme colors that make sense for this component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "defaultListboxOpen": {
      "description": "If <code>true</code>, the select will be initially open.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "defaultValue": {
      "description": "The default selected value. Use when the component is not controlled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "endDecorator": {
      "description": "Trailing adornment for the select.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "getSerializedValue": {
      "description": "A function to convert the currently selected value to a string. Used to set a value of a hidden input associated with the select, so that the selected value can be posted with a form.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "indicator": {
      "description": "The indicator(*) for the select.    ________________   [ value        * ]    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "listboxId": {
      "description": "<code>id</code> attribute of the listbox element. Also used to derive the <code>id</code> attributes of options.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "listboxOpen": {
      "description": "Controls the open state of the select&#39;s listbox.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "name": {
      "description": "Name of the element. For example used by the server to identify the fields in form submits. If the name is provided, the component will render a hidden input element that can be submitted to a server.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onChange": {
      "description": "Callback fired when an option is selected.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onClose": {
      "description": "Triggered when focus leaves the menu and the menu should close.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onListboxOpenChange": {
      "description": "Callback fired when the component requests to be opened. Use in controlled mode (see listboxOpen).",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "placeholder": {
      "description": "Text to show when there is no selected value.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "renderValue": {
      "description": "Function that customizes the rendering of the selected value.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "size": {
      "description": "The size of the component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slots": {
      "description": "The components used for each slot inside.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "startDecorator": {
      "description": "Leading adornment for the select.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "value": {
      "description": "The selected value. Set to <code>null</code> to deselect all options.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "variant": {
      "description": "The <a href=\"https://mui.com/joy-ui/main-features/global-variants/\">global variant</a> to use.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Class name applied to {{nodeName}}.", "nodeName": "the root slot" },
    "button": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the button slot"
    },
    "indicator": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the indicator slot"
    },
    "startDecorator": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the startDecorator slot"
    },
    "endDecorator": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the endDecorator slot"
    },
    "popper": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the popper slot"
    },
    "listbox": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the listbox slot"
    },
    "colorPrimary": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorNeutral": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>color=\"neutral\"</code>"
    },
    "colorDanger": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>color=\"danger\"</code>"
    },
    "colorInfo": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>color=\"info\"</code>"
    },
    "colorSuccess": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>color=\"success\"</code>"
    },
    "colorWarning": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>color=\"warning\"</code>"
    },
    "colorContext": {
      "description": "Class name applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "color inversion is triggered"
    },
    "variantPlain": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>variant=\"plain\"</code>"
    },
    "variantOutlined": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>variant=\"outlined\"</code>"
    },
    "variantSoft": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>variant=\"soft\"</code>"
    },
    "variantSolid": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>variant=\"solid\"</code>"
    },
    "sizeSm": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>size=\"sm\"</code>"
    },
    "sizeMd": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>size=\"md\"</code>"
    },
    "sizeLg": {
      "description": "Class name applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>size=\"lg\"</code>"
    },
    "focusVisible": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the SelectBase root slot",
      "conditions": "the button is keyboard focused"
    },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "<code>disabled={true}</code>"
    },
    "expanded": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root slot",
      "conditions": "listbox open"
    }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "button": "The component that renders the button.",
    "startDecorator": "The component that renders the start decorator.",
    "endDecorator": "The component that renders the end decorator.",
    "indicator": "The component that renders the indicator.",
    "listbox": "The component that renders the listbox."
  }
}
