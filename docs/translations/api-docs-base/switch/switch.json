{
  "componentDescription": "The foundation for building custom-styled switches.",
  "propDescriptions": {
    "checked": {
      "description": "If <code>true</code>, the component is checked.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "defaultChecked": {
      "description": "The default checked state. Use when the component is not controlled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onChange": {
      "description": "Callback fired when the state is changed.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {
        "event": "The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (string). You can pull out the new checked state by accessing <code>event.target.checked</code> (boolean)."
      }
    },
    "readOnly": {
      "description": "If <code>true</code>, the component is read only.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "required": {
      "description": "If <code>true</code>, the <code>input</code> element is required.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slotProps": {
      "description": "The props used for each slot inside the Switch.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slots": {
      "description": "The components used for each slot inside the Switch. Either a string to use a HTML element or a component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Class applied to the root element." },
    "input": { "description": "Class applied to the internal input element" },
    "track": { "description": "Class applied to the track element" },
    "thumb": { "description": "Class applied to the thumb element" },
    "checked": {
      "description": "State class applied to the root element if the switch is checked"
    },
    "disabled": {
      "description": "State class applied to the root element if the switch is disabled"
    },
    "focusVisible": {
      "description": "State class applied to the root element if the switch has visible focus"
    },
    "readOnly": { "description": "Class applied to the root element if the switch is read-only" }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "input": "The component that renders the input.",
    "thumb": "The component that renders the thumb.",
    "track": "The component that renders the track."
  }
}
