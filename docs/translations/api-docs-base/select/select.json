{
  "componentDescription": "The foundation for building custom-styled select components.",
  "propDescriptions": {
    "autoFocus": {
      "description": "If <code>true</code>, the select element is focused during the first mount",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "defaultListboxOpen": {
      "description": "If <code>true</code>, the select will be initially open.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "defaultValue": {
      "description": "The default selected value. Use when the component is not controlled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disabled": {
      "description": "If <code>true</code>, the select is disabled.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "getOptionAsString": {
      "description": "A function used to convert the option label to a string. It&#39;s useful when labels are elements and need to be converted to plain text to enable navigation using character keys on a keyboard.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "getSerializedValue": {
      "description": "A function to convert the currently selected value to a string. Used to set a value of a hidden input associated with the select, so that the selected value can be posted with a form.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "listboxId": {
      "description": "<code>id</code> attribute of the listbox element.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "listboxOpen": {
      "description": "Controls the open state of the select&#39;s listbox.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "multiple": {
      "description": "If <code>true</code>, selecting multiple values is allowed. This affects the type of the <code>value</code>, <code>defaultValue</code>, and <code>onChange</code> props.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "name": {
      "description": "Name of the element. For example used by the server to identify the fields in form submits. If the name is provided, the component will render a hidden input element that can be submitted to a server.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onChange": {
      "description": "Callback fired when an option is selected.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onListboxOpenChange": {
      "description": "Callback fired when the component requests to be opened. Use in controlled mode (see listboxOpen).",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "renderValue": {
      "description": "Function that customizes the rendering of the selected value.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slotProps": {
      "description": "The props used for each slot inside the Input.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slots": {
      "description": "The components used for each slot inside the Select. Either a string to use a HTML element or a component.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "value": {
      "description": "The selected value. Set to <code>null</code> to deselect all options.",
      "notes": "",
      "deprecated": "",
      "typeDescriptions": {}
    }
  },
  "classDescriptions": {
    "root": { "description": "Class name applied to the root element." },
    "listbox": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the listbox element"
    },
    "popper": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the popper element"
    },
    "active": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root `button` element",
      "conditions": "<code>active={true}</code>"
    },
    "expanded": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root `button` element",
      "conditions": "<code>expanded={true}</code>"
    },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root `button` element and the listbox 'ul' element",
      "conditions": "<code>disabled={true}</code>"
    },
    "focusVisible": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root `button` element",
      "conditions": "<code>focusVisible={true}</code>"
    }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "listbox": "The component that renders the listbox.",
    "popper": "The component that renders the popper."
  }
}
